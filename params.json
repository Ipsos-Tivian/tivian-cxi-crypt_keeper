{"body":"[![Build Status](https://secure.travis-ci.org/jmazzi/crypt_keeper.png?branch=master)](http://travis-ci.org/jmazzi/crypt_keeper)\r\n\r\n![CryptKeeper](http://i.imgur.com/qf0aD.jpg)\r\n\r\n# CryptKeeper\r\n\r\nProvides transparent encryption for ActiveRecord. It is encryption agnostic.\r\nYou can guard your data with any encryption algorithm you want. All you need\r\nis a simple class that does 3 things.\r\n\r\n1. Takes a hash argument for `initialize`\r\n2. Provides an `encrypt` method that returns the encrypted string\r\n3. Provides a `decrypt` method that returns the plaintext\r\n\r\nNote: Any options defined using `crypt_keeper` will be passed to `new` as a\r\nhash.\r\n\r\nYou can see an AES example [here](https://github.com/jmazzi/crypt_keeper_providers/blob/master/lib/crypt_keeper_providers/aes.rb).\r\n\r\n## Why?\r\n\r\nThe options available were either too complicated under the hood or had weird\r\nedge cases that made the library hard to use. I wanted to write something\r\nsimple that *just works*.\r\n\r\n## Usage\r\n\r\n```ruby\r\nclass MyModel < ActiveRecord::Base\r\n  crypt_keeper :field, :other_field, :encryptor => :aes, :key => 'super_good_password'\r\nend\r\n\r\nmodel = MyModel.new(field: 'sometext')\r\nmodel.save! #=> Your data is now encrypted\r\nmodel.field #=> 'sometext'\r\n```\r\n\r\nIt works with all persistences methods: `update_attributes`, `create`, `save`\r\netc.\r\n\r\nNote: `update_attribute` is deprecated in ActiveRecord 3.2.7. It is superseded\r\nby [update_column](http://apidock.com/rails/ActiveRecord/Persistence/update_column)\r\nwhich _skips_ all validations, callbacks.\r\n\r\nThat means using `update_column` will not perform any encryption. This is\r\nexpected behavior, and has its use cases. An example would be migrating from\r\none type of encryption to another. Using `update_column` would allow you to\r\nupdate the content without going through the current encryptor.\r\n\r\n## Creating your own encryptor\r\n\r\nCreating your own encryptor is easy. All you have to do is create a class\r\nunder the `CryptKeeperProviders` namespace, like this:\r\n\r\n```ruby\r\nmodule CryptKeeperProviders\r\n  class MyEncryptor\r\n    def initialize(options = {})\r\n    end\r\n\r\n    def encrypt(value)\r\n    end\r\n\r\n    def decrypt(value)\r\n    end\r\n  end\r\nend\r\n\r\n```\r\n\r\nJust require your code and setup your model to use it. Just pass the class name\r\nas a string or an underscored symbol\r\n\r\n```ruby\r\nclass MyModel < ActiveRecord::Base\r\n  crypt_keeper :field, :other_field, :encryptor => :my_encryptor, :key => 'super_good_password'\r\nend\r\n```\r\n\r\n## Available Encryptors\r\n\r\nThere are two included encryptors.\r\n\r\n* [AES](https://github.com/jmazzi/crypt_keeper_providers/blob/master/lib/crypt_keeper_providers/aes.rb)\r\n  * Encryption is peformed using AES-256 via OpenSSL.\r\n\r\n* [PostgreSQL PGP](https://github.com/jmazzi/crypt_keeper_providers/blob/master/lib/crypt_keeper_providers/postgres_pgp.rb).\r\n  * Encryption is performed using PostgresSQL's native [PGP functions](http://www.postgresql.org/docs/9.1/static/pgcrypto.html).\r\n  * It requires the `pgcrypto` PostgresSQL extension:\r\n    `CREATE EXTENSION IF NOT EXISTS pgcrypto`\r\n  * ActiveRecord logs are [automatically](https://github.com/jmazzi/crypt_keeper_providers/blob/master/lib/crypt_keeper_providers/postgres_pgp/log_subscriber.rb)\r\n    filtered for you to protect senitive data from being logged.\r\n\r\n## Requirements\r\n\r\nCryptKeeper has been tested against ActiveRecord 3.0, 3.1, and 3.2 using ruby\r\n1.9.2, 1.9.3 and jruby in 1.9 mode.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'crypt_keeper'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install crypt_keeper\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Crypt Keeper","tagline":"Transparent encryption for ActiveRecord that isn't over-engineered","google":"UA-82959-5"}