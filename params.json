{"name":"Crypt Keeper","tagline":"Transparent ActiveRecord encryption","body":"[![Build Status](https://secure.travis-ci.org/jmazzi/crypt_keeper.png?branch=master)](http://travis-ci.org/jmazzi/crypt_keeper)\r\n\r\n![CryptKeeper](http://i.imgur.com/qf0aD.jpg)\r\n\r\n# CryptKeeper\r\n\r\nProvides transparent encryption for ActiveRecord. It is encryption agnostic.\r\nYou can guard your data with any encryption algorithm you want. All you need\r\nis a simple class that does 3 things.\r\n\r\n1. Takes a hash argument for `initialize`\r\n2. Provides an `encrypt` method that returns the encrypted string\r\n3. Provides a `decrypt` method that returns the plaintext\r\n\r\nNote: Any options defined using `crypt_keeper` will be passed to `new` as a\r\nhash.\r\n\r\nYou can see an AES example [here](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/aes.rb).\r\n\r\n## Why?\r\n\r\nThe options available were either too complicated under the hood or had weird\r\nedge cases that made the library hard to use. I wanted to write something\r\nsimple that *just works*.\r\n\r\n## Usage\r\n\r\n```ruby\r\nclass MyModel < ActiveRecord::Base\r\n  crypt_keeper :field, :other_field, :encryptor => :aes_new, :key => 'super_good_password', salt: 'salt'\r\nend\r\n\r\nmodel = MyModel.new(field: 'sometext')\r\nmodel.save! #=> Your data is now encrypted\r\nmodel.field #=> 'sometext'\r\n```\r\n\r\nIt works with all persistences methods: `update_attributes`, `create`, `save`\r\netc.\r\n\r\nNote: `update_attribute` is deprecated in ActiveRecord 3.2.7. It is superseded\r\nby [update_column](http://apidock.com/rails/ActiveRecord/Persistence/update_column)\r\nwhich _skips_ all validations, callbacks.\r\n\r\nThat means using `update_column` will not perform any encryption. This is\r\nexpected behavior, and has its use cases. An example would be migrating from\r\none type of encryption to another. Using `update_column` would allow you to\r\nupdate the content without going through the current encryptor.\r\n\r\n## Supported Available Encryptors\r\n\r\nThere are four supported encryptors: `aes_new`, `mysql_aes_new`, `postgresql_pgp`, `postgres_pgp_public_key`.\r\n\r\n* [AES New](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/aes_new.rb)\r\n  * Encryption is peformed using AES-256 via OpenSSL.\r\n  * Passphrases are derived using [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2)\r\n\r\n* [MySQL AES New](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/mysql_aes_new.rb)\r\n  * Encryption is peformed MySQL's native AES functions.\r\n  * ActiveRecord logs are [automatically](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/log_subscriber/mysql_aes.rb)\r\n    filtered for you to protect sensitive data from being logged.\r\n  * Passphrases are derived using [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2)\r\n\r\n* [PostgreSQL PGP](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/postgres_pgp.rb).\r\n  * Encryption is performed using PostgresSQL's native [PGP functions](http://www.postgresql.org/docs/9.1/static/pgcrypto.html).\r\n  * It requires the `pgcrypto` PostgresSQL extension:\r\n    `CREATE EXTENSION IF NOT EXISTS pgcrypto`\r\n  * ActiveRecord logs are [automatically](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/log_subscriber/postgres_pgp.rb)\r\n    filtered for you to protect senitive data from being logged.\r\n  * Custom options can be set through the `:pgcrypto_options`. E.g. `crypt_keeper :field, encryptor: :postgres_pgp, pgcrypto_options: 'compress-level=9'\r\n  * Passphrases are hashed by PostgresSQL itself using a [String2Key (S2K)](http://www.postgresql.org/docs/9.2/static/pgcrypto.html) algorithm. This is rather similar to crypt() algorithms — purposefully slow and with random salt — but it produces a full-length binary key.\r\n\r\n* [PostgreSQL PGP Public Key](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/postgres_pgp_public_key.rb).\r\n  * Encryption is performed using PostgresSQL's native [PGP functions](http://www.postgresql.org/docs/9.1/static/pgcrypto.html).\r\n  * It requires the `pgcrypto` PostgresSQL extension:\r\n    `CREATE EXTENSION IF NOT EXISTS pgcrypto`\r\n  * ActiveRecord logs are [automatically](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/log_subscriber/postgres_pgp.rb)\r\n    filtered for you to protect senitive data from being logged.\r\n  * Accepts a public and private_key. The private key is optional. If the private key is not present the ciphertext value is returned instead of the plaintext. This allows you to keep the private key off certain servers. Encryption is possible with only a public key. Any server that needs access to the plaintext will need the private key.\r\n  * Passphrases are hashed by PostgresSQL itself using a [String2Key (S2K)](http://www.postgresql.org/docs/9.2/static/pgcrypto.html) algorithm. This is rather similar to crypt() algorithms — purposefully slow and with random salt — but it produces a full-length binary key.\r\n\r\n## Deprecated Encryptors\r\nThese encryptors are now deprecated and should be migrated from as soon as possible using the included `bin/crypt_keeper` script.\r\n\r\n* [AES Legacy](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/aes.rb) *DEPRECATED*\r\n  * Encryption is peformed using AES-256 via OpenSSL.\r\n  * [How to migrate to AES New](https://github.com/jmazzi/crypt_keeper/wiki/AES-Legacy-Migration-Instructions)\r\n\r\n* [MySQL AES Legacy](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/provider/mysql_aes.rb) *DEPRECATED*\r\n  * Encryption is peformed MySQL's native AES functions.\r\n  * ActiveRecord logs are [automatically](https://github.com/jmazzi/crypt_keeper/blob/master/lib/crypt_keeper/log_subscriber/mysql_aes.rb)\r\n    filtered for you to protect senitive data from being logged.\r\n  * [How to migrate to MySQL AES New](https://github.com/jmazzi/crypt_keeper/wiki/MysqlAes-Legacy-Migration-Instructions)\r\n\r\n## Searching\r\nSearching ciphertext is a complex problem that varies depending on the encryption algorithm you choose. All of the bundled providers include search support, but they have some caveats.\r\n\r\n* AES\r\n  * The Ruby implementation of AES uses a random initialization vector. The same plaintext encrypted multiple times will have different output each time for the ciphertext. Since this is the case, it is not possible to search leveraging the database. Database rows will need to be filtered in memory. It is suggested that you use a scope or ActiveRecord batches to narrow the results before seaching them.\r\n\r\n* Mysql AES\r\n * Surprisingly, MySQL's implementation of AES does not use a random initialization vector. The column containing the ciphertext can be indexed and searched quickly.\r\n\r\n* PostgresSQL PGP\r\n * PGP also uses a random initialization vector which means it generates unique output each time you encrypt plaintext. Although the database can be searched by performing row level decryption and comparing the plaintext, it will not be able to use an index. A scope or batch is suggested when searching.\r\n\r\n## How the search interface is used\r\n\r\n```ruby\r\nModel.search_by_plaintext(:field, 'searchstring')\r\n# With a scope\r\nModel.where(something: 'blah').search_by_plaintext(:field, 'searchstring')\r\n```\r\n\r\n## Creating your own encryptor\r\n\r\nCreating your own encryptor is easy. All you have to do is create a class\r\nunder the `CryptKeeper::Provider` namespace, like this:\r\n\r\n```ruby\r\nmodule CryptKeeper\r\n  module Provider\r\n    class MyEncryptor\r\n      def initialize(options = {})\r\n      end\r\n\r\n      def encrypt(value)\r\n      end\r\n\r\n      def decrypt(value)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n```\r\n\r\nJust require your code and setup your model to use it. Just pass the class name\r\nas a string or an underscored symbol\r\n\r\n```ruby\r\nclass MyModel < ActiveRecord::Base\r\n  crypt_keeper :field, :other_field, :encryptor => :my_encryptor, :key => 'super_good_password'\r\nend\r\n```\r\n\r\n## Requirements\r\n\r\nCryptKeeper has been tested against ActiveRecord 3.1, 3.2, 4.0, 4.1 using ruby\r\n1.9.3, 2.0.0 and 2.1.1\r\n\r\nActiveRecord 4.0 is supported starting with v0.11.0.\r\nActiveRecord 4.1 is supported starting with v0.16.0. (unreleased, use master branch)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'crypt_keeper'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install crypt_keeper\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"UA-82959-5","note":"Don't delete this file! It's used internally to help with page regeneration."}